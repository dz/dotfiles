#!/usr/bin/bash

# Inspired greatly by Armin Ronacher's bashrc
# https://github.com/mitsuhiko/dotfiles/blob/master/bash/bashrc

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

DEFAULT_COLOR="[00;1m"
GRAY_COLOR="[37;1m"
PINK_COLOR="[35;1m"
GREEN_COLOR="[32;1m"
CYAN_COLOR="[36;1m"
ORANGE_COLOR="[33;1m"
RED_COLOR="[31;1m"
if [ `id -u` == '0' ]; then
  USER_COLOR=$RED_COLOR
else
  USER_COLOR=$ORANGE_COLOR
fi

VCPROMPT_EXECUTABLE=/usr/local/bin/vcprompt

# FZF funcs
# find file and open
function fo() {
  local out file key
  out=$(fzf --query="$1" --exit-0 --expect=ctrl-o,ctrl-e)
  key=$(head -1 <<< "$out")
  file=$(head -2 <<< "$out" | tail -1)
  if [ -n "$file" ]; then
    [ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
  fi
}

# cdf - cd into the directory of the selected file
function cdf() {
   local file
   local dir
   file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
 }

# fd - cd to selected directory
function fd() {
  local dir
  dir=$(find ${1:-*} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}


# fda - including hidden directories
function fda() {
  local dir
  dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}

# fdr - cd to selected parent directory
function fdr() {
  local declare dirs=()
  get_parent_dirs() {
    if [[ -d "${1}" ]]; then dirs+=("$1"); else return; fi
    if [[ "${1}" == '/' ]]; then
      for _dir in "${dirs[@]}"; do echo $_dir; done
    else
      get_parent_dirs $(dirname "$1")
    fi
  }
  local DIR=$(get_parent_dirs $(realpath "${1:-$(pwd)}") | fzf-tmux --tac)
  cd "$DIR"
}

# skm - merge git branch (local only)
skm() {
  local branches branch
  branches=$(git branch | grep -v HEAD) &&
  branch=$(echo "$branches" | sk --ansi --color=16 +m) &&
  git merge $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# skmr - merge git branch (includes remotes)
skmr() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" | sk --ansi --color=16 +m) &&
  git merge $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# fb - checkout git branch (no remotes, local only)
skb() {
  local branches branch
  branches=$(git branch | grep -v HEAD) &&
  branch=$(echo "$branches" | sk --ansi --color=16 +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# skb - checkout git branch (including remote branches)
skbr() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" | sk --ansi --color=16 +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# skdiff - diff git branch against current
skdiff() {
  local branches branch
  branches=$(git branch | grep -v HEAD) &&
  branch=$(echo "$branches" | sk --ansi --color=16 +m) &&
  git diff $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

function vcprompt_branch() {
  $VCPROMPT_EXECUTABLE -f $'%b'
}

function vcprompt_changed() {
  $VCPROMPT_EXECUTABLE -f $'%m%u'
}

function lastcommandfailed() {
  code=$?
  if [ $code != 0 ]; then
    echo -n $'\033[37;1m exited \033[31;1m'
    echo -n $code
    echo -n $'\033[37;1m'
  fi
}

function backgroundjobs() {
  jobs|python -c 'if 1:
    import sys
    items = ["\033[36;1m%s\033[37;1m" % x.split()[2]
             for x in sys.stdin.read().splitlines()]
    if items:
      if len(items) > 2:
        string = "%s, and %s" % (", ".join(items[:-1]), items[-1])
      else:
        string = ", ".join(items)
      print "\033[37;1m running %s" % string
  '
}

function searchreplace() {
  git grep -l "$1" | xargs sed -i "" "s/$1/$2/g"
}
export -f searchreplace

export BASEPROMPT='\[\e${GREEN_COLOR}\]\w \[\e${GRAY_COLOR}\]\[\e${GRAY_COLOR}\](\[\e${RED_COLOR}\]$(vcprompt_branch)\[\e${GREEN_COLOR}\]$(vcprompt_changed)\[\e${DEFAULT_COLOR}\])\[\e${GRAY_COLOR}\]'

export PROMPT="${BASEPROMPT}$ "
export PS1=$PROMPT

export TERM=xterm-256color
export GREP_OPTIONS='-i --color=auto' GREP_COLOR='1;32'

export FZF_DEFAULT_OPTS='--exact --cycle'

export CLICOLOR=1
if [ `uname` == "Darwin" ]; then
  export LSCOLORS=ExGxFxDxCxHxHxCbCeEbEb
  export LC_CTYPE=en_US.utf-8
else
  alias ls='ls --color=auto -F'
fi
export IGNOREEOF=1
export LESS=FRSX

export LIBTOOLIZE=glibtoolize

alias v="vagrant ssh"
alias vs="vagrant ssh"
alias vss="vagrant ssh"
alias vssh="vagrant ssh"

# python
export PYTHONDONTWRITEBYTECODE=1

# Enable bash history
export HISTCONTROL=erasedups
TSIZE=50000
shopt -s histappend

export FALLBACK_DYLD_LIBRARY_PATH=/usr/local/lib

# These set up/down to do the history searching
bind '"\e[A"':history-search-backward
bind '"\e[B"':history-search-forward

export PATH=/usr/local/bin:/usr/local/sbin:$PATH
export SSL_CERT_FILE=/usr/local/etc/openssl/certs/cert.pem
export GOPATH=/Users/dzhou/Code/go
export GOROOT=/usr/local/go
export PATH="$PATH:$GOPATH/bin"
export SOLR_HOME=/usr/local/solr14
export PATH=".bundle/bin:$PATH"
export RBENV_ROOT=/usr/local/var/rbenv
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"

alias c="clear"
alias l="ls"
alias less="less -R"
alias tree="tree -CAh"
alias gitlg="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen%cn%Creset %Cblue%cr%Creset' --abbrev-commit --date=relative"
alias gits="git status"
alias gs="git status"
alias gd="git diff"
export GREP_OPTIONS='--color=auto -i'

#sublime text aliases
alias slt='open -a "Sublime Text 2"'

# set editor to vim
export EDITOR='vim'

#things for bash history to ignore
export HISTIGNORE="&:ls:[bf]g:exit:clear:c"

# solr setup
export SOLR_HOME=~/Documents/Vox/solr14

# rails aliases
alias bun="bundle"

# node and npm shit
export NODE_PATH="/usr/local/lib/node:/usr/local/lib/jsctags"

export PROJECTS_PATH="/Users/dzhou/Vox"

# elastic search
export JAVA_HOME="/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home"


alias gg="git g"

alias be="bundle exec"

export PATH="/Users/dzhou/Library/Python/2.7/bin:$PATH"
### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

alias npm-exec='PATH=$(npm bin):$PATH'
alias ne='PATH=$(npm bin):$PATH'

alias fstart="bundle exec foreman start -c all=1,web=0"

alias dok="docker"
alias di="docker images"
alias dps="docker ps"
alias docker-clean='docker rmi $(docker images -f "dangling=true" -q)'

alias npm-exec='PATH=$(npm bin):$PATH'
alias ne='PATH=$(npm bin):$PATH'

alias g='git'

alias neural="ssh -i ~/neural.pem ubuntu@ec2-54-164-155-102.compute-1.amazonaws.com"

alias o="fo"
alias d="skdiff"
alias b="skb"
alias br="skbr"
alias m="skm"
alias mr="skmr"

alias push="git push"
alias puhs="git push"
alias psh="git push"
alias pul="git pull"
alias pull="git pull"
alias pulll="git pull"
alias dif="skdiff"
alias diff="skdiff"
alias difff="skdiff"
alias merge="skm"
alias checkout="skb"
alias checkoutr="skbr"

alias dc="docker-compose"

alias mm="git merge master"

source ~/.amazon_secrets

source ~/.git-completion.bash

# general secrets
[[ -f ~/.bashrc.secrets ]] && . ~/.bashrc.secrets

if [ -f $(brew --prefix)/etc/bash_completion ]; then
  . $(brew --prefix)/etc/bash_completion
fi

export NVM_DIR="$HOME/.nvm"
  [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
